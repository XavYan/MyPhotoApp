/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package uni.hbarquin.myphotoapp;

import java.awt.BorderLayout;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Point;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.net.URLConnection;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JPanel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;

//import org.jfree.data.xy;

/**
 *
 * @author xavier
 */
public class MainWindow extends javax.swing.JFrame {

    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        initComponents();
        setExtendedState(javax.swing.JFrame.MAXIMIZED_BOTH);
        fileChooser = new JFileChooser("D:\\\\Im√°genes");
        isHistogramActivated = true;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panels = new JTabbedPaneCloseButton();
        aside = new javax.swing.JPanel();
        fileTypeGroup = new javax.swing.JPanel();
        fileTypeLabel = new javax.swing.JLabel();
        fileTypeInput = new javax.swing.JTextField();
        minGrayGroup = new javax.swing.JPanel();
        minGrayLabel = new javax.swing.JLabel();
        minGrayInput = new javax.swing.JTextField();
        maxGrayGroup = new javax.swing.JPanel();
        maxGrayLabel = new javax.swing.JLabel();
        maxGrayInput = new javax.swing.JTextField();
        brightGroup = new javax.swing.JPanel();
        brightLabel = new javax.swing.JLabel();
        brightInput = new javax.swing.JTextField();
        contrastGroup = new javax.swing.JPanel();
        contrastLabel = new javax.swing.JLabel();
        contrastInput = new javax.swing.JTextField();
        entropyGroup = new javax.swing.JPanel();
        entropyLabel = new javax.swing.JLabel();
        entropyInput = new javax.swing.JTextField();
        histogramPanel = new javax.swing.JPanel();
        toggleHistogramButton = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        fileSection = new javax.swing.JMenu();
        openOption = new javax.swing.JMenuItem();
        saveOption = new javax.swing.JMenuItem();
        saveAsOption = new javax.swing.JMenuItem();
        quitOption = new javax.swing.JMenuItem();
        editSection = new javax.swing.JMenu();
        grayScaleOption = new javax.swing.JMenuItem();
        regionOfInterestOption = new javax.swing.JMenuItem();
        adjustSectionOption = new javax.swing.JMenu();
        brightOption = new javax.swing.JMenuItem();
        contrastOption = new javax.swing.JMenuItem();
        histogramSectionOption = new javax.swing.JMenu();
        equalizeHistogramOption = new javax.swing.JMenuItem();
        specifyHistogramOption = new javax.swing.JMenuItem();
        differencesSectionOption = new javax.swing.JMenu();
        substractImagesOption = new javax.swing.JMenuItem();
        changeMapOption = new javax.swing.JMenuItem();
        flipSectionOption = new javax.swing.JMenu();
        horizontalFlipOption = new javax.swing.JMenuItem();
        verticalFlipOption = new javax.swing.JMenuItem();
        rotateMultipleSectionOption = new javax.swing.JMenu();
        rotate90Option = new javax.swing.JMenuItem();
        rotate180Option = new javax.swing.JMenuItem();
        rotate270Option = new javax.swing.JMenuItem();
        transformSectionOption = new javax.swing.JMenu();
        rotateOption = new javax.swing.JMenuItem();
        rotateBilinearOption = new javax.swing.JMenuItem();
        scaleOption = new javax.swing.JMenuItem();
        bilinearScaleOption = new javax.swing.JMenuItem();
        trasposeImageOption = new javax.swing.JMenuItem();
        linearFitOption = new javax.swing.JMenuItem();
        gammaCorrectionOption = new javax.swing.JMenuItem();
        helpSection = new javax.swing.JMenu();
        aboutOption = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("MyPhotoApp");
        setMinimumSize(new java.awt.Dimension(800, 800));
        setName("mainWindow"); // NOI18N

        panels.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                panelsStateChanged(evt);
            }
        });

        aside.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        aside.setMinimumSize(new java.awt.Dimension(68, 32));
        aside.setPreferredSize(new java.awt.Dimension(235, 434));
        aside.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 5, 10));

        fileTypeGroup.setLayout(new javax.swing.BoxLayout(fileTypeGroup, javax.swing.BoxLayout.LINE_AXIS));

        fileTypeLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        fileTypeLabel.setText("File Type");
        fileTypeLabel.setMaximumSize(new java.awt.Dimension(70, 25));
        fileTypeLabel.setMinimumSize(new java.awt.Dimension(70, 14));
        fileTypeLabel.setPreferredSize(new java.awt.Dimension(100, 25));
        fileTypeGroup.add(fileTypeLabel);

        fileTypeInput.setEditable(false);
        fileTypeInput.setText("image/jpg");
        fileTypeInput.setEnabled(false);
        fileTypeInput.setMargin(new java.awt.Insets(2, 8, 2, 2));
        fileTypeInput.setMaximumSize(new java.awt.Dimension(150, 30));
        fileTypeInput.setMinimumSize(new java.awt.Dimension(13, 30));
        fileTypeInput.setPreferredSize(new java.awt.Dimension(100, 30));
        fileTypeInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileTypeInputActionPerformed(evt);
            }
        });
        fileTypeGroup.add(fileTypeInput);

        aside.add(fileTypeGroup);

        minGrayGroup.setLayout(new javax.swing.BoxLayout(minGrayGroup, javax.swing.BoxLayout.LINE_AXIS));

        minGrayLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        minGrayLabel.setText("Min Gray Value");
        minGrayLabel.setMaximumSize(new java.awt.Dimension(50, 25));
        minGrayLabel.setPreferredSize(new java.awt.Dimension(100, 25));
        minGrayGroup.add(minGrayLabel);

        minGrayInput.setEditable(false);
        minGrayInput.setText("0");
        minGrayInput.setEnabled(false);
        minGrayInput.setMargin(new java.awt.Insets(2, 8, 2, 2));
        minGrayInput.setMaximumSize(new java.awt.Dimension(150, 30));
        minGrayInput.setMinimumSize(new java.awt.Dimension(13, 30));
        minGrayInput.setPreferredSize(new java.awt.Dimension(100, 30));
        minGrayGroup.add(minGrayInput);

        aside.add(minGrayGroup);

        maxGrayGroup.setLayout(new javax.swing.BoxLayout(maxGrayGroup, javax.swing.BoxLayout.LINE_AXIS));

        maxGrayLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        maxGrayLabel.setText("Max Gray Value");
        maxGrayLabel.setMaximumSize(new java.awt.Dimension(50, 25));
        maxGrayLabel.setPreferredSize(new java.awt.Dimension(100, 25));
        maxGrayGroup.add(maxGrayLabel);

        maxGrayInput.setEditable(false);
        maxGrayInput.setText("255");
        maxGrayInput.setEnabled(false);
        maxGrayInput.setMargin(new java.awt.Insets(2, 8, 2, 2));
        maxGrayInput.setMaximumSize(new java.awt.Dimension(150, 30));
        maxGrayInput.setMinimumSize(new java.awt.Dimension(13, 30));
        maxGrayInput.setPreferredSize(new java.awt.Dimension(100, 30));
        maxGrayGroup.add(maxGrayInput);

        aside.add(maxGrayGroup);

        brightGroup.setLayout(new javax.swing.BoxLayout(brightGroup, javax.swing.BoxLayout.LINE_AXIS));

        brightLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        brightLabel.setText("Bright");
        brightLabel.setMaximumSize(new java.awt.Dimension(50, 25));
        brightLabel.setPreferredSize(new java.awt.Dimension(100, 25));
        brightGroup.add(brightLabel);

        brightInput.setEditable(false);
        brightInput.setText("21.72");
        brightInput.setEnabled(false);
        brightInput.setMargin(new java.awt.Insets(2, 8, 2, 2));
        brightInput.setMaximumSize(new java.awt.Dimension(150, 30));
        brightInput.setMinimumSize(new java.awt.Dimension(13, 30));
        brightInput.setPreferredSize(new java.awt.Dimension(100, 30));
        brightGroup.add(brightInput);

        aside.add(brightGroup);

        contrastGroup.setLayout(new javax.swing.BoxLayout(contrastGroup, javax.swing.BoxLayout.LINE_AXIS));

        contrastLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        contrastLabel.setText("Contrast");
        contrastLabel.setMaximumSize(new java.awt.Dimension(50, 25));
        contrastLabel.setPreferredSize(new java.awt.Dimension(100, 25));
        contrastGroup.add(contrastLabel);

        contrastInput.setEditable(false);
        contrastInput.setText("15.3");
        contrastInput.setEnabled(false);
        contrastInput.setMargin(new java.awt.Insets(2, 8, 2, 2));
        contrastInput.setMaximumSize(new java.awt.Dimension(150, 30));
        contrastInput.setMinimumSize(new java.awt.Dimension(13, 30));
        contrastInput.setPreferredSize(new java.awt.Dimension(100, 30));
        contrastGroup.add(contrastInput);

        aside.add(contrastGroup);

        entropyGroup.setLayout(new javax.swing.BoxLayout(entropyGroup, javax.swing.BoxLayout.LINE_AXIS));

        entropyLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        entropyLabel.setText("Entropy");
        entropyLabel.setMaximumSize(new java.awt.Dimension(50, 25));
        entropyLabel.setPreferredSize(new java.awt.Dimension(100, 25));
        entropyGroup.add(entropyLabel);

        entropyInput.setEditable(false);
        entropyInput.setText("18.5");
        entropyInput.setEnabled(false);
        entropyInput.setMargin(new java.awt.Insets(2, 8, 2, 2));
        entropyInput.setMaximumSize(new java.awt.Dimension(150, 30));
        entropyInput.setMinimumSize(new java.awt.Dimension(13, 30));
        entropyInput.setPreferredSize(new java.awt.Dimension(100, 30));
        entropyGroup.add(entropyInput);

        aside.add(entropyGroup);

        histogramPanel.setPreferredSize(new java.awt.Dimension(250, 200));

        javax.swing.GroupLayout histogramPanelLayout = new javax.swing.GroupLayout(histogramPanel);
        histogramPanel.setLayout(histogramPanelLayout);
        histogramPanelLayout.setHorizontalGroup(
            histogramPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 250, Short.MAX_VALUE)
        );
        histogramPanelLayout.setVerticalGroup(
            histogramPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 200, Short.MAX_VALUE)
        );

        aside.add(histogramPanel);

        toggleHistogramButton.setText("Toggle Histogram");
        toggleHistogramButton.setEnabled(false);
        toggleHistogramButton.setPreferredSize(new java.awt.Dimension(150, 23));
        toggleHistogramButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toggleHistogramButtonActionPerformed(evt);
            }
        });
        aside.add(toggleHistogramButton);

        fileSection.setText("File");

        openOption.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.SHIFT_DOWN_MASK | java.awt.event.InputEvent.CTRL_DOWN_MASK));
        openOption.setText("Open File...");
        openOption.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                openOptionMouseClicked(evt);
            }
        });
        openOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openOptionActionPerformed(evt);
            }
        });
        fileSection.add(openOption);

        saveOption.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        saveOption.setText("Save...");
        saveOption.setEnabled(false);
        saveOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveOptionActionPerformed(evt);
            }
        });
        fileSection.add(saveOption);

        saveAsOption.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_DOWN_MASK | java.awt.event.InputEvent.CTRL_DOWN_MASK));
        saveAsOption.setText("Save As...");
        saveAsOption.setEnabled(false);
        saveAsOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAsOptionActionPerformed(evt);
            }
        });
        fileSection.add(saveAsOption);

        quitOption.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        quitOption.setText("Quit");
        quitOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitOptionActionPerformed(evt);
            }
        });
        fileSection.add(quitOption);

        menuBar.add(fileSection);

        editSection.setText("Image");

        grayScaleOption.setText("Convert to Gray Scale");
        grayScaleOption.setEnabled(false);
        grayScaleOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                grayScaleOptionActionPerformed(evt);
            }
        });
        editSection.add(grayScaleOption);

        regionOfInterestOption.setText("Select Region of Interest...");
        regionOfInterestOption.setEnabled(false);
        regionOfInterestOption.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                regionOfInterestOptionMouseClicked(evt);
            }
        });
        regionOfInterestOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                regionOfInterestOptionActionPerformed(evt);
            }
        });
        editSection.add(regionOfInterestOption);

        adjustSectionOption.setText("Adjust");
        adjustSectionOption.setEnabled(false);

        brightOption.setText("Bright...");
        brightOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                brightOptionActionPerformed(evt);
            }
        });
        adjustSectionOption.add(brightOption);

        contrastOption.setText("Contrast...");
        contrastOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                contrastOptionActionPerformed(evt);
            }
        });
        adjustSectionOption.add(contrastOption);

        editSection.add(adjustSectionOption);

        histogramSectionOption.setText("Histogram");
        histogramSectionOption.setEnabled(false);

        equalizeHistogramOption.setText("Equalize histogram");
        equalizeHistogramOption.setEnabled(false);
        equalizeHistogramOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                equalizeHistogramOptionActionPerformed(evt);
            }
        });
        histogramSectionOption.add(equalizeHistogramOption);

        specifyHistogramOption.setText("Specify histogram");
        specifyHistogramOption.setEnabled(false);
        specifyHistogramOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                specifyHistogramOptionActionPerformed(evt);
            }
        });
        histogramSectionOption.add(specifyHistogramOption);

        editSection.add(histogramSectionOption);

        differencesSectionOption.setText("Differences between images");
        differencesSectionOption.setEnabled(false);

        substractImagesOption.setText("Substract images");
        substractImagesOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                substractImagesOptionActionPerformed(evt);
            }
        });
        differencesSectionOption.add(substractImagesOption);

        changeMapOption.setText("Change map");
        changeMapOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeMapOptionActionPerformed(evt);
            }
        });
        differencesSectionOption.add(changeMapOption);

        editSection.add(differencesSectionOption);

        flipSectionOption.setText("Flip operations");
        flipSectionOption.setEnabled(false);

        horizontalFlipOption.setText("Horizontal flip");
        horizontalFlipOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                horizontalFlipOptionActionPerformed(evt);
            }
        });
        flipSectionOption.add(horizontalFlipOption);

        verticalFlipOption.setText("Vertical flip");
        verticalFlipOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verticalFlipOptionActionPerformed(evt);
            }
        });
        flipSectionOption.add(verticalFlipOption);

        editSection.add(flipSectionOption);

        rotateMultipleSectionOption.setText("Rotate with multiple of 90");
        rotateMultipleSectionOption.setEnabled(false);

        rotate90Option.setText("Rotate 90¬∫");
        rotate90Option.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rotate90OptionActionPerformed(evt);
            }
        });
        rotateMultipleSectionOption.add(rotate90Option);

        rotate180Option.setText("Rotate 180¬∫");
        rotate180Option.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rotate180OptionActionPerformed(evt);
            }
        });
        rotateMultipleSectionOption.add(rotate180Option);

        rotate270Option.setText("Rotate 270¬∫");
        rotate270Option.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rotate270OptionActionPerformed(evt);
            }
        });
        rotateMultipleSectionOption.add(rotate270Option);

        editSection.add(rotateMultipleSectionOption);

        transformSectionOption.setText("Transform image");
        transformSectionOption.setEnabled(false);

        rotateOption.setText("Rotate...");
        rotateOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rotateOptionActionPerformed(evt);
            }
        });
        transformSectionOption.add(rotateOption);

        rotateBilinearOption.setText("Rotate (bilinear)...");
        rotateBilinearOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rotateBilinearOptionActionPerformed(evt);
            }
        });
        transformSectionOption.add(rotateBilinearOption);

        scaleOption.setText("Scale image");
        scaleOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scaleOptionActionPerformed(evt);
            }
        });
        transformSectionOption.add(scaleOption);

        bilinearScaleOption.setText("Scale image (bilinear)");
        bilinearScaleOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bilinearScaleOptionActionPerformed(evt);
            }
        });
        transformSectionOption.add(bilinearScaleOption);

        editSection.add(transformSectionOption);

        trasposeImageOption.setText("Traspose image");
        trasposeImageOption.setEnabled(false);
        trasposeImageOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trasposeImageOptionActionPerformed(evt);
            }
        });
        editSection.add(trasposeImageOption);

        linearFitOption.setText("Piecewise linear fit");
        linearFitOption.setEnabled(false);
        linearFitOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                linearFitOptionActionPerformed(evt);
            }
        });
        editSection.add(linearFitOption);

        gammaCorrectionOption.setText("Gamma correction");
        gammaCorrectionOption.setEnabled(false);
        gammaCorrectionOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gammaCorrectionOptionActionPerformed(evt);
            }
        });
        editSection.add(gammaCorrectionOption);

        menuBar.add(editSection);

        helpSection.setText("Help");

        aboutOption.setText("About...");
        aboutOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutOptionActionPerformed(evt);
            }
        });
        helpSection.add(aboutOption);

        menuBar.add(helpSection);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(panels, javax.swing.GroupLayout.DEFAULT_SIZE, 632, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(aside, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(aside, javax.swing.GroupLayout.DEFAULT_SIZE, 516, Short.MAX_VALUE))
                    .addComponent(panels))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public ImageProcessing getSelectedImage () {
        return ((ImageTabSectionWindow) panels.getSelectedComponent()).getImageObject().getImage();
    }
    
    public void enableSaveOptionsIfNecessary () {
        if (panels.getTabCount() > 0) {
            saveOption.setEnabled(true);
            saveAsOption.setEnabled(true);
        } else {
            saveOption.setEnabled(false);
            saveAsOption.setEnabled(false);
        }
    }
    
    public void enableGrayScaleOptionIfNecessary() {
        ImageTabSectionWindow its = (ImageTabSectionWindow) panels.getSelectedComponent();
        
        if (its == null) {
            grayScaleOption.setEnabled(false);
            return;
        }
        
        ImageProcessing image = its.getImageObject().getImage();
        if (!image.isGrayScale()) {
            grayScaleOption.setEnabled(true);
        } else {
            grayScaleOption.setEnabled(false);
        }
    }
    
    public void setAllIPOptions (boolean enable) {
        adjustSectionOption.setEnabled(enable);
        equalizeHistogramOption.setEnabled(enable);
        gammaCorrectionOption.setEnabled(enable);
        differencesSectionOption.setEnabled(enable);
        linearFitOption.setEnabled(enable);
        transformSectionOption.setEnabled(enable);
        rotateMultipleSectionOption.setEnabled(enable);
        flipSectionOption.setEnabled(enable);
        trasposeImageOption.setEnabled(enable);
    }
    
    public void enableIPOptionsIfNecessary() {
        ImageTabSectionWindow its = (ImageTabSectionWindow) panels.getSelectedComponent();
        
        if (its == null) {
            setAllIPOptions(false);
            return;
        }
        
        ImageProcessing image = its.getImageObject().getImage();
        if (image.isGrayScale()) {
            setAllIPOptions(true);
        } else {
            setAllIPOptions(false);
        }
    }
    
    public void enableHistogramIfNecessary () {
        if (panels.getTabCount() > 0) {
            if (this.isHistogramActivated) {
                printHistogram();
            } else {
                printAccumulateHistogram();
            }
            this.toggleHistogramButton.setEnabled(true);
        } else {
            this.histogramPanel.removeAll();
            this.toggleHistogramButton.setEnabled(false);
        }
    }
    
    public void setSubImage(Point p1, Point p2) {
        ImageTabSectionWindow its = (ImageTabSectionWindow) panels.getSelectedComponent();
        BufferedImage bi = its.getImageObject().getImage().getImageFromRange(p1, p2);
        ImageTabSectionWindow ip = new ImageTabSectionWindow(bi);
        
        String newFilename = its.getImageObject().getImage().getNameWithoutExtension() + "-subimage." + its.getImageObject().getImage().getExtension();
        String newPath = its.getImageObject().getImage().getPathWithoutExtension() + "-subimage." + its.getImageObject().getImage().getExtension();
        
        panels.addTab(newFilename, ip);
        panels.setSelectedIndex(panels.getTabCount() - 1);
        its = (ImageTabSectionWindow) panels.getSelectedComponent();
        its.getImageObject().getImage().setFilename(newPath);
    }
    
    public void setImageGammaCorrection (float gamma) {
        ImageTabSectionWindow its = (ImageTabSectionWindow) panels.getSelectedComponent();
        ImageTabSectionWindow newits = new ImageTabSectionWindow(its.getImageObject().getImage());
        
        String newFilename = its.getImageObject().getImage().getNameWithoutExtension() + "-gamma-" + gamma + "." + its.getImageObject().getImage().getExtension();
        String newPath = its.getImageObject().getImage().getPathWithoutExtension() + "-gamma-" + gamma + "." + its.getImageObject().getImage().getExtension();
        
        newits.getImageObject().getImage().applyGammaCorrection(gamma);
        newits.getImageObject().getImage().setFilename(newPath);
        
        panels.addTab(newFilename, newits);        
        panels.setSelectedIndex(panels.getTabCount() - 1);
    }
    
    public void setImageWithNewBright (int newBright) {
        ImageTabSectionWindow its = (ImageTabSectionWindow) panels.getSelectedComponent();
        ImageTabSectionWindow newits = new ImageTabSectionWindow(its.getImageObject().getImage());
        
        String newFilename = its.getImageObject().getImage().getNameWithoutExtension() + "-bright-" + newBright + "." + its.getImageObject().getImage().getExtension();
        String newPath = its.getImageObject().getImage().getPathWithoutExtension() + "-bright-" + newBright + "." + its.getImageObject().getImage().getExtension();
        
        newits.getImageObject().getImage().changeBrightTo(newBright);
        newits.getImageObject().getImage().setFilename(newPath);
        
        panels.addTab(newFilename, newits);        
        panels.setSelectedIndex(panels.getTabCount() - 1);
    }
    
    public void setImageWithNewContrast (int newContrast) {
        ImageTabSectionWindow its = (ImageTabSectionWindow) panels.getSelectedComponent();
        ImageTabSectionWindow newits = new ImageTabSectionWindow(its.getImageObject().getImage());
        
        String newFilename = its.getImageObject().getImage().getNameWithoutExtension() + "-contrast-" + newContrast + "." + its.getImageObject().getImage().getExtension();
        String newPath = its.getImageObject().getImage().getPathWithoutExtension() + "-contrast" + newContrast + "." + its.getImageObject().getImage().getExtension();
        
        newits.getImageObject().getImage().changeContrastTo(newContrast);
        newits.getImageObject().getImage().setFilename(newPath);
        
        panels.addTab(newFilename, newits);        
        panels.setSelectedIndex(panels.getTabCount() - 1);
    }
    
    public void setImageWithNewHistogram (ImageProcessing image) {
        ImageTabSectionWindow its = (ImageTabSectionWindow) panels.getSelectedComponent();
        ImageTabSectionWindow newits = new ImageTabSectionWindow(its.getImageObject().getImage());
        
        String newFilename = its.getImageObject().getImage().getNameWithoutExtension() + "-spHistogram." + its.getImageObject().getImage().getExtension();
        String newPath = its.getImageObject().getImage().getPathWithoutExtension() + "-spHistogram." + its.getImageObject().getImage().getExtension();
        
        newits.getImageObject().getImage().specifyHistogramFromImage(image);
        newits.getImageObject().getImage().setFilename(newPath);
        
        panels.addTab(newFilename, newits);        
        panels.setSelectedIndex(panels.getTabCount() - 1);
    }
    
    public void substractImages (ImageProcessing image) {
        ImageProcessing ip = ((ImageTabSectionWindow) panels.getSelectedComponent()).getImageObject().getImage();
        ImageProcessing newip = ip.substractImage(image);
        
        String newFilename = ip.getNameWithoutExtension() + "-substract." + ip.getExtension();
        String newPath = ip.getPathWithoutExtension() + "-substract." + ip.getExtension();
        
        newip.setFilename(newPath);
        panels.addTab(newFilename, new ImageTabSectionWindow(newip));
        panels.setSelectedIndex(panels.getTabCount() - 1);
    }
    
    public void applyUmbral (int umbral) {
        ImageProcessing image = ((ImageTabSectionWindow) panels.getSelectedComponent()).getImageObject().getImage();
        ImageProcessing newimage = image.getMapUsingUmbral(umbral);
        
        String newFilename = image.getNameWithoutExtension() + "-umap." + image.getExtension();
        String newPath = image.getPathWithoutExtension() + "-umap." + image.getExtension();
        
        newimage.setFilename(newPath);
        panels.addTab(newFilename, new ImageTabSectionWindow(newimage));
        panels.setSelectedIndex(panels.getTabCount() - 1);
    }
    
    public void prepareToGetUmbral (ImageProcessing image) {
        ImageProcessing actualImage = ((ImageTabSectionWindow) panels.getSelectedComponent()).getImageObject().getImage();
        SelectUmbralWindow suw = new SelectUmbralWindow(this, rootPaneCheckingEnabled);
        ImageProcessing substract = actualImage.substractImage(image);
        suw.setImage(substract);
        suw.setVisible(true);
    }
    
    public void applyPiecewiseLinearFit (Point[] coordinates) {
        ImageProcessing image = ((ImageTabSectionWindow) panels.getSelectedComponent()).getImageObject().getImage();
        ImageProcessing newimage = image.applyPiecewiseLinearFit(coordinates);
        
        String newFilename = image.getNameWithoutExtension() + "-linearfit." + image.getExtension();
        String newPath = image.getPathWithoutExtension() + "-linearfit." + image.getExtension();
        
        newimage.setFilename(newPath);
        panels.addTab(newFilename, new ImageTabSectionWindow(newimage));
        panels.setSelectedIndex(panels.getTabCount() - 1);
    }
    
    public void scaleImage (int widthScale, int heightScale, boolean isBilinearOperation) {
        ImageProcessing image = ((ImageTabSectionWindow) panels.getSelectedComponent()).getImageObject().getImage();
        ImageProcessing newimage = image.scaleImage((float) widthScale / (float) 100, (float) heightScale / (float) 100, isBilinearOperation);
        
        String newFilename = image.getNameWithoutExtension() + "-scale" + widthScale + "." + image.getExtension();
        String newPath = image.getPathWithoutExtension() + "-scale-" + widthScale + "." + image.getExtension();
        
        newimage.setFilename(newPath);
        panels.addTab(newFilename, new ImageTabSectionWindow(newimage));
        panels.setSelectedIndex(panels.getTabCount() - 1);
    }
    
    public void rotateImage (boolean right, float angle, boolean bilinear) {
        ImageProcessing image = ((ImageTabSectionWindow) panels.getSelectedComponent()).getImageObject().getImage();
        ImageProcessing newimage = image.rotateImage(right ? angle : (float) (-1) * angle, bilinear);
        
        String newFilename = image.getNameWithoutExtension() + "-rotated-" + angle + "." + image.getExtension();
        String newPath = image.getPathWithoutExtension() + "-rotated-" + angle + "." + image.getExtension();
        
        newimage.setFilename(newPath);
        panels.addTab(newFilename, new ImageTabSectionWindow(newimage));
        panels.setSelectedIndex(panels.getTabCount() - 1);
    }
    
    private void openOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openOptionActionPerformed
        fileChooser.setMultiSelectionEnabled(true);
        int result = fileChooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            File[] files = fileChooser.getSelectedFiles();
            for (File file : files) {
                ImageTabSectionWindow ip = new ImageTabSectionWindow(file);
                panels.addTab(file.getName(), ip);
            }
            panels.setSelectedIndex(panels.getTabCount() - 1);
        }
    }//GEN-LAST:event_openOptionActionPerformed

    private void saveOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveOptionActionPerformed
        final ImageTabSectionWindow its = (ImageTabSectionWindow) panels.getSelectedComponent();
        its.getImageObject().getImage().saveIntoFile();
    }//GEN-LAST:event_saveOptionActionPerformed

    private void openOptionMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_openOptionMouseClicked

    }//GEN-LAST:event_openOptionMouseClicked

    private void quitOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitOptionActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_quitOptionActionPerformed

    private void aboutOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutOptionActionPerformed
        About aboutWindow = new About(this, rootPaneCheckingEnabled);
        aboutWindow.setVisible(true);
    }//GEN-LAST:event_aboutOptionActionPerformed

    private void saveAsOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAsOptionActionPerformed
        fileChooser.setMultiSelectionEnabled(false);
        ImageTabSectionWindow actualTab = (ImageTabSectionWindow) panels.getSelectedComponent();
        fileChooser.setCurrentDirectory(actualTab.getImageObject().getImage().getFile());
        int result = fileChooser.showSaveDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            final File image = fileChooser.getSelectedFile();
            actualTab.getImageObject().getImage().saveIntoFileAs(image);
            editTabImage(panels.getSelectedIndex(), image.getName(), image);
        }        
    }//GEN-LAST:event_saveAsOptionActionPerformed

    private void grayScaleOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_grayScaleOptionActionPerformed
        ImageTabSectionWindow its = (ImageTabSectionWindow) panels.getSelectedComponent();
        ImageTabSectionWindow newits = new ImageTabSectionWindow(its.getImageObject().getImage());
        
        String newFilename = its.getImageObject().getImage().getNameWithoutExtension() + "-grayScale." + its.getImageObject().getImage().getExtension();
        String newPath = its.getImageObject().getImage().getPathWithoutExtension() + "-grayScale." + its.getImageObject().getImage().getExtension();
        
        newits.getImageObject().getImage().convertToGrayScale();
        newits.getImageObject().getImage().setFilename(newPath);
        
        panels.addTab(newFilename, newits);        
        panels.setSelectedIndex(panels.getTabCount() - 1);
    }//GEN-LAST:event_grayScaleOptionActionPerformed

    private void panelsStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_panelsStateChanged
        this.enableSaveOptionsIfNecessary();
        this.enableGrayScaleOptionIfNecessary();      
        this.enableIPOptionsIfNecessary();
        this.enableHistogramIfNecessary();
        
        if (panels.getTabCount() > 0) {
            this.setImageInformation();
            this.regionOfInterestOption.setEnabled(true);
            this.specifyHistogramOption.setEnabled(true);
            this.histogramSectionOption.setEnabled(true);
        } else {
            this.regionOfInterestOption.setEnabled(false);
            this.specifyHistogramOption.setEnabled(false);
            this.histogramSectionOption.setEnabled(false);
        }
        
        repaint();
    }//GEN-LAST:event_panelsStateChanged

    private void regionOfInterestOptionMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_regionOfInterestOptionMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_regionOfInterestOptionMouseClicked

    private void regionOfInterestOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_regionOfInterestOptionActionPerformed
        SubImageFormWindow subImageWindow = new SubImageFormWindow(this, rootPaneCheckingEnabled);
        subImageWindow.setVisible(true);
    }//GEN-LAST:event_regionOfInterestOptionActionPerformed

    private void toggleHistogramButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toggleHistogramButtonActionPerformed
        if (this.isHistogramActivated) {
            System.out.println("Mostrando histograma acumulado!");
            printAccumulateHistogram();
            this.isHistogramActivated = false;
        } else {
            System.out.println("Mostrando histograma normal!");
            printHistogram();
            this.isHistogramActivated = true;
        }
    }//GEN-LAST:event_toggleHistogramButtonActionPerformed

    private void brightOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_brightOptionActionPerformed
        BrightWindow bw = new BrightWindow(this, rootPaneCheckingEnabled);
        
        ImageTabSectionWindow its = (ImageTabSectionWindow) panels.getSelectedComponent();
        
        bw.setActualValue(its.getImageObject().getImage().getBright());
        bw.setVisible(true);
    }//GEN-LAST:event_brightOptionActionPerformed

    private void contrastOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_contrastOptionActionPerformed
        ContrastWindow cw = new ContrastWindow(this, rootPaneCheckingEnabled);
        ImageTabSectionWindow its = (ImageTabSectionWindow) panels.getSelectedComponent();
        
        cw.setActualValue(its.getImageObject().getImage().getContrast());
        cw.setVisible(true);
    }//GEN-LAST:event_contrastOptionActionPerformed

    private void equalizeHistogramOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_equalizeHistogramOptionActionPerformed
        ImageProcessing ip = ((ImageTabSectionWindow) panels.getSelectedComponent()).getImageObject().getImage();
        ImageTabSectionWindow newits = new ImageTabSectionWindow(ip);
        
        String newFilename = ip.getNameWithoutExtension() + "-equalized." + ip.getExtension();
        String newPath = ip.getPathWithoutExtension() + "-equalized." + ip.getExtension();
        
        newits.getImageObject().getImage().equalizeHistogram();
        newits.getImageObject().getImage().setFilename(newPath);
        
        panels.addTab(newFilename, newits);        
        panels.setSelectedIndex(panels.getTabCount() - 1);
    }//GEN-LAST:event_equalizeHistogramOptionActionPerformed

    private void specifyHistogramOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_specifyHistogramOptionActionPerformed
        SpecifyHistogramWindow shw = new SpecifyHistogramWindow(this, rootPaneCheckingEnabled);
        shw.setVisible(true);
    }//GEN-LAST:event_specifyHistogramOptionActionPerformed

    private void gammaCorrectionOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gammaCorrectionOptionActionPerformed
        GammaCorrectionWindow gcw = new GammaCorrectionWindow(this, rootPaneCheckingEnabled);
        gcw.setVisible(true);
    }//GEN-LAST:event_gammaCorrectionOptionActionPerformed

    private void substractImagesOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_substractImagesOptionActionPerformed
        SubstractImagesWindow siw = new SubstractImagesWindow(this, rootPaneCheckingEnabled);
        siw.setVisible(true);
    }//GEN-LAST:event_substractImagesOptionActionPerformed

    private void changeMapOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeMapOptionActionPerformed
        SubstractImagesWindow siw = new SubstractImagesWindow(this, rootPaneCheckingEnabled);
        siw.setOnlySubstract(false);
        siw.setVisible(true);
    }//GEN-LAST:event_changeMapOptionActionPerformed

    private void linearFitOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_linearFitOptionActionPerformed
        LinearFitWindow lfw = new LinearFitWindow(this, rootPaneCheckingEnabled);
        lfw.setVisible(true);
    }//GEN-LAST:event_linearFitOptionActionPerformed

    private void horizontalFlipOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_horizontalFlipOptionActionPerformed
        ImageProcessing image = ((ImageTabSectionWindow) panels.getSelectedComponent()).getImageObject().getImage();
        ImageProcessing newimage = image.getHorizontalFlippedImage();
        
        String newFilename = image.getNameWithoutExtension() + "-hflipped." + image.getExtension();
        String newPath = image.getPathWithoutExtension() + "-hflipped." + image.getExtension();
        
        newimage.setFilename(newPath);
        panels.addTab(newFilename, new ImageTabSectionWindow(newimage));
        panels.setSelectedIndex(panels.getTabCount() - 1);
    }//GEN-LAST:event_horizontalFlipOptionActionPerformed

    private void verticalFlipOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verticalFlipOptionActionPerformed
        ImageProcessing image = ((ImageTabSectionWindow) panels.getSelectedComponent()).getImageObject().getImage();
        ImageProcessing newimage = image.getVerticalFlippedImage();
        
        String newFilename = image.getNameWithoutExtension() + "-vflipped." + image.getExtension();
        String newPath = image.getPathWithoutExtension() + "-vflipped." + image.getExtension();
        
        newimage.setFilename(newPath);
        panels.addTab(newFilename, new ImageTabSectionWindow(newimage));
        panels.setSelectedIndex(panels.getTabCount() - 1);
    }//GEN-LAST:event_verticalFlipOptionActionPerformed

    private void trasposeImageOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trasposeImageOptionActionPerformed
        ImageProcessing image = ((ImageTabSectionWindow) panels.getSelectedComponent()).getImageObject().getImage();
        ImageProcessing newimage = image.getTrasposeImage();
        
        String newFilename = image.getNameWithoutExtension() + "-trasposed." + image.getExtension();
        String newPath = image.getPathWithoutExtension() + "-trasposed." + image.getExtension();
        
        newimage.setFilename(newPath);
        panels.addTab(newFilename, new ImageTabSectionWindow(newimage));
        panels.setSelectedIndex(panels.getTabCount() - 1);
    }//GEN-LAST:event_trasposeImageOptionActionPerformed

    private void fileTypeInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileTypeInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fileTypeInputActionPerformed

    private void rotate90OptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rotate90OptionActionPerformed
        ImageProcessing image = ((ImageTabSectionWindow) panels.getSelectedComponent()).getImageObject().getImage();
        ImageProcessing newimage = image.rotate90();
        
        String newFilename = image.getNameWithoutExtension() + "-rotated-90." + image.getExtension();
        String newPath = image.getPathWithoutExtension() + "-rotated-90." + image.getExtension();
        
        newimage.setFilename(newPath);
        panels.addTab(newFilename, new ImageTabSectionWindow(newimage));
        panels.setSelectedIndex(panels.getTabCount() - 1);
    }//GEN-LAST:event_rotate90OptionActionPerformed

    private void rotate270OptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rotate270OptionActionPerformed
        ImageProcessing image = ((ImageTabSectionWindow) panels.getSelectedComponent()).getImageObject().getImage();
        ImageProcessing newimage = image.rotate270();
        
        String newFilename = image.getNameWithoutExtension() + "-rotated-270." + image.getExtension();
        String newPath = image.getPathWithoutExtension() + "-rotated-270." + image.getExtension();
        
        newimage.setFilename(newPath);
        panels.addTab(newFilename, new ImageTabSectionWindow(newimage));
        panels.setSelectedIndex(panels.getTabCount() - 1);
    }//GEN-LAST:event_rotate270OptionActionPerformed

    private void rotate180OptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rotate180OptionActionPerformed
        ImageProcessing image = ((ImageTabSectionWindow) panels.getSelectedComponent()).getImageObject().getImage();
        ImageProcessing newimage = image.rotate180();
        
        String newFilename = image.getNameWithoutExtension() + "-rotated-180." + image.getExtension();
        String newPath = image.getPathWithoutExtension() + "-rotated-180." + image.getExtension();
        
        newimage.setFilename(newPath);
        panels.addTab(newFilename, new ImageTabSectionWindow(newimage));
        panels.setSelectedIndex(panels.getTabCount() - 1);
    }//GEN-LAST:event_rotate180OptionActionPerformed

    private void scaleOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scaleOptionActionPerformed
        ScaleWindow sw = new ScaleWindow(this, rootPaneCheckingEnabled);
        sw.setVisible(true);
    }//GEN-LAST:event_scaleOptionActionPerformed

    private void bilinearScaleOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bilinearScaleOptionActionPerformed
        ScaleWindow sw = new ScaleWindow(this, rootPaneCheckingEnabled);
        sw.setBilinearOperation(true);
        sw.setVisible(true);
    }//GEN-LAST:event_bilinearScaleOptionActionPerformed

    private void rotateOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rotateOptionActionPerformed
        RotateWindow rw = new RotateWindow(this, rootPaneCheckingEnabled);
        rw.setVisible(true);
    }//GEN-LAST:event_rotateOptionActionPerformed

    private void rotateBilinearOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rotateBilinearOptionActionPerformed
        RotateWindow rw = new RotateWindow(this, rootPaneCheckingEnabled);
        rw.setBilinearTo(true);
        rw.setVisible(true);
    }//GEN-LAST:event_rotateBilinearOptionActionPerformed

    private void printHistogram () {
        ImageTabSectionWindow its = (ImageTabSectionWindow) panels.getSelectedComponent();
        ChartPanel oPanel = its.getImageObject().getImage().getHistogram().getChartHistogram();
        
        this.histogramPanel.removeAll();
        
        histogramPanel.setLayout(new BorderLayout());
        histogramPanel.add(oPanel);
        histogramPanel.validate();
        histogramPanel.repaint();
    }
    
    private void printAccumulateHistogram () {
        ImageTabSectionWindow its = (ImageTabSectionWindow) panels.getSelectedComponent();
        ChartPanel oPanel = its.getImageObject().getImage().getAccumulateHistogram().getChartHistogram();
        
        this.histogramPanel.removeAll();
        
        histogramPanel.setLayout(new BorderLayout());
        histogramPanel.add(oPanel);
        histogramPanel.validate();
        histogramPanel.repaint();
    }
    
    private void editTabImage (int index, String tabName, File imageFile) {
        panels.addTab(tabName, new ImageTabSectionWindow(imageFile));
        panels.removeTabAt(index);
        panels.setSelectedIndex(panels.getTabCount() - 1);
    }
    
    private void setImageInformation () {
        if (panels.getSelectedComponent() == null) {
            return;
        }
        
        ImageProcessing image = ((ImageTabSectionWindow) panels.getSelectedComponent()).getImageObject().getImage();
        
        int minGrayValue = image.getMinGrayValue();
        int maxGrayValue = image.getMaxGrayValue();
        
        this.fileTypeInput.setText(URLConnection.guessContentTypeFromName(image.getName()));
        this.minGrayInput.setText(minGrayValue == -1 ? "-" : Integer.toString(minGrayValue));
        this.maxGrayInput.setText(maxGrayValue == -1 ? "-" : Integer.toString(maxGrayValue));
        this.brightInput.setText(!image.isGrayScale() ? "-" : Integer.toString(image.getBright()));
        this.contrastInput.setText(!image.isGrayScale() ? "-" : Integer.toString(image.getContrast()));
        this.entropyInput.setText(!image.isGrayScale() ? "-" : new DecimalFormat(".##").format(image.getEntropy()));
    }
    
    private boolean isHistogramActivated;
    private JFileChooser fileChooser;
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutOption;
    private javax.swing.JMenu adjustSectionOption;
    private javax.swing.JPanel aside;
    private javax.swing.JMenuItem bilinearScaleOption;
    private javax.swing.JPanel brightGroup;
    private javax.swing.JTextField brightInput;
    private javax.swing.JLabel brightLabel;
    private javax.swing.JMenuItem brightOption;
    private javax.swing.JMenuItem changeMapOption;
    private javax.swing.JPanel contrastGroup;
    private javax.swing.JTextField contrastInput;
    private javax.swing.JLabel contrastLabel;
    private javax.swing.JMenuItem contrastOption;
    private javax.swing.JMenu differencesSectionOption;
    private javax.swing.JMenu editSection;
    private javax.swing.JPanel entropyGroup;
    private javax.swing.JTextField entropyInput;
    private javax.swing.JLabel entropyLabel;
    private javax.swing.JMenuItem equalizeHistogramOption;
    private javax.swing.JMenu fileSection;
    private javax.swing.JPanel fileTypeGroup;
    private javax.swing.JTextField fileTypeInput;
    private javax.swing.JLabel fileTypeLabel;
    private javax.swing.JMenu flipSectionOption;
    private javax.swing.JMenuItem gammaCorrectionOption;
    private javax.swing.JMenuItem grayScaleOption;
    private javax.swing.JMenu helpSection;
    private javax.swing.JPanel histogramPanel;
    private javax.swing.JMenu histogramSectionOption;
    private javax.swing.JMenuItem horizontalFlipOption;
    private javax.swing.JMenuItem linearFitOption;
    private javax.swing.JPanel maxGrayGroup;
    private javax.swing.JTextField maxGrayInput;
    private javax.swing.JLabel maxGrayLabel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JPanel minGrayGroup;
    private javax.swing.JTextField minGrayInput;
    private javax.swing.JLabel minGrayLabel;
    private javax.swing.JMenuItem openOption;
    private javax.swing.JTabbedPane panels;
    private javax.swing.JMenuItem quitOption;
    private javax.swing.JMenuItem regionOfInterestOption;
    private javax.swing.JMenuItem rotate180Option;
    private javax.swing.JMenuItem rotate270Option;
    private javax.swing.JMenuItem rotate90Option;
    private javax.swing.JMenuItem rotateBilinearOption;
    private javax.swing.JMenu rotateMultipleSectionOption;
    private javax.swing.JMenuItem rotateOption;
    private javax.swing.JMenuItem saveAsOption;
    private javax.swing.JMenuItem saveOption;
    private javax.swing.JMenuItem scaleOption;
    private javax.swing.JMenuItem specifyHistogramOption;
    private javax.swing.JMenuItem substractImagesOption;
    private javax.swing.JButton toggleHistogramButton;
    private javax.swing.JMenu transformSectionOption;
    private javax.swing.JMenuItem trasposeImageOption;
    private javax.swing.JMenuItem verticalFlipOption;
    // End of variables declaration//GEN-END:variables
}
